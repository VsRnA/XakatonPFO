import { rLottery } from '#repos';
import { executeInTransaction } from '#db';

/**
 * –ó–∞–ø—É—Å–∫ –ª–æ—Ç–µ—Ä–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª–∞ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
 */
export async function startScheduledLotteries() {
  try {
    const now = new Date();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º findAll —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    const { lotteries: lotteriesToStart } = await rLottery.list({
      status: 'draft',
      startAtTo: now, // startAt <= now
      limit: null,
      offset: null,
    });
    
    if (lotteriesToStart.length === 0) {
      console.log('–ù–µ—Ç –ª–æ—Ç–µ—Ä–µ–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞');
      return { started: 0 };
    }

    let startedCount = 0;

    for (const lottery of lotteriesToStart) {
      try {
        await executeInTransaction(async (options) => {
          await rLottery.update(lottery.id, { status: 'inProgress' }, options);
          console.log(`–õ–æ—Ç–µ—Ä–µ—è #${lottery.id} "${lottery.name}" –∑–∞–ø—É—â–µ–Ω–∞`);
          startedCount++;
        });
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ª–æ—Ç–µ—Ä–µ–∏ #${lottery.id}:`, error);
      }
    }

    console.log(`‚úì –ó–∞–ø—É—â–µ–Ω–æ –ª–æ—Ç–µ—Ä–µ–π: ${startedCount} –∏–∑ ${lotteriesToStart.length}`);
    return { started: startedCount, total: lotteriesToStart.length };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ startScheduledLotteries:', error);
    throw error;
  }
}

/**
 * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª–∞ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
 */
export async function finishScheduledLotteries() {
  try {
    const now = new Date();
    
    const { lotteries: lotteriesToFinish } = await rLottery.list({
      status: 'inProgress',
      endAtTo: now,
      limit: null,
      offset: null,
    });
    
    if (lotteriesToFinish.length === 0) {
      console.log('‚úì –ù–µ—Ç –ª–æ—Ç–µ—Ä–µ–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
      return { finished: 0 };
    }

    let finishedCount = 0;

    for (const lottery of lotteriesToFinish) {
      try {
        await executeInTransaction(async (options) => {
          await rLottery.update(lottery.id, { status: 'finished' }, options);
          console.log(`–õ–æ—Ç–µ—Ä–µ—è #${lottery.id} "${lottery.name}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
          finishedCount++;
        });
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏ #${lottery.id}:`, error);
      }
    }

    console.log(`–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ª–æ—Ç–µ—Ä–µ–π: ${finishedCount} –∏–∑ ${lotteriesToFinish.length}`);
    return { finished: finishedCount, total: lotteriesToFinish.length };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ finishScheduledLotteries:', error);
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –ª–æ—Ç–µ—Ä–µ–π
 */
export async function updateAllLotteryStatuses() {
  console.log('üîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ª–æ—Ç–µ—Ä–µ–π:', new Date().toISOString());
  
  try {
    const startResult = await startScheduledLotteries();
    const finishResult = await finishScheduledLotteries();
    
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
      started: startResult.started,
      finished: finishResult.finished,
    });
    
    return {
      started: startResult.started,
      finished: finishResult.finished,
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ª–æ—Ç–µ—Ä–µ–π:', error);
    throw error;
  }
}