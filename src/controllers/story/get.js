export default async () => {
  return {
    algorithm_name: "Доказуемо честная лотерея с тройной энтропией (Сервер + Игроки + Drand)",
    algorithm_type: "Схема commitment-reveal с внешним маяком случайности",
    version: "1.0",
    stages: [
      {
        stage: 1,
        name: "Создание лотереи",
        short_description: "Сервер генерирует секретный seed и публикует его хэш ",
        detailed_description: "Сервер создаёт криптографически стойкий seed, вычисляет его SHA-256 хеш (seedHash) и публикует вместе с параметрами лотереи. Определяется будущий раунд drand для розыгрыша.",
        steps: {
          backend: [
            "Генерация seed (32 байта, криптографически стойкий CSPRNG)",
            "Вычисление seedHash = SHA-256(seed)",
            "Определение будущего раунда drand (текущий раунд + offset на 2-24 часа)",
            "Сохранение seed в БД",
          ],
          frontend: [
            "Отображение опубликованного seedHash",
            "Отображение номера раунда drand и ссылки на drand API",
            "Отображение дедлайна регистрации",
            "Отображение параметров лотереи (количество бочек)"
          ]
        }
      },
      {
        stage: 2,
        name: "Регистрация игроков",
        short_description: "Игроки загружают картинки и выбирают бочки, сервер публикует хеши",
        detailed_description: "Игрок создаёт картинку на canvas, выбирает свои бочки и отправляет данные на сервер. Сервер сохраняет картинку в S3, вычисляет entropy.",
        steps: {
          backend: [
            "Приём картинки (PNG blob) и списка бочек от игрока",
            "Валидация бочек (X уникальных чисел из [1..N])",
            "Сохранение картинки в S3",
            "Вычисление entropy = SHA-256(буфер картинки)",
            "Сохранение в БД: userId, attachmentKey, entropy, metadata.barrelsNumber",
          ],
          frontend: [
            "Создание canvas для рисования",
            "Конвертация canvas в PNG blob",
            "UI выбора X бочек из N",
            "Отображение подтверждения регистрации",
            "Отображение выбранных бочек игрока"
          ]
        }
      },
      {
        stage: 3,
        name: "Закрытие регистрации",
        short_description: "Фиксация финального списка участников",
        detailed_description: "По наступлению дедлайна сервер блокирует новые регистрации и фиксирует список всех зарегистрированных игроков. Список становится неизменяемым.",
        steps: {
          backend: [
            "Проверка наступления endAt",
            "Установка статуса лотереи: isFinished",
            "Фиксация финального списка игроков в БД",
          ],
          frontend: [
            "Отображение статуса 'Регистрация закрыта'",
            "Отображение обратного отсчёта до раунда drand",
            "Блокировка формы регистрации"
          ]
        }
      },
      {
        stage: 4,
        name: "Получение drand randomness",
        short_description: "Фронт запрашивает случайное число от drand и отправляет на сервер",
        detailed_description: "При наступлении целевого раунда drand фронтенд делает запрос к публичному API drand, получает randomness и отправляет на сервер для использования в розыгрыше.",
        steps: {
          backend: [
            "Приём drand_randomness  от фронта",
            "Переход к этапу розыгрыша"
          ],
          frontend: [
            "Ожидание наступления целевого раунда drand",
            "GET запрос к https://api.drand.sh/public/{drand_round}",
            "Извлечение поля randomness из JSON ответа",
            "POST запрос на сервер с drand_randomness для запуска розыгрыша"
          ]
        }
      },
      {
        stage: 5,
        name: "Розыгрыш и определение победителей",
        short_description: "Сервер раскрывает seed, генерирует выигрышные бочки и определяет победителей",
        detailed_description: "Сервер выполняет полный цикл розыгрыша: раскрывает seed, формирует final_seed из трёх источников энтропии, генерирует выигрышные бочки детерминированным алгоритмом Fisher-Yates, сравнивает с бочками игроков и определяет победителей. Всё выполняется в одной атомарной операции.",
        steps: {
          backend: [
            "Проверка что регистрация закрыта и розыгрыш не проведён",
            "Раскрытие seed из БД",
            "Получение всех entropy игроков из БД в порядке userId",
            "Формирование combined = 'seed + drand_randomness + concat(player_entropy_1, player_entropy_2, ..., player_entropy_N)",
            "Вычисление final_seed = SHA-256(combined)",
            "Генерация выигрышных бочек: создать массив [1..N], перемешать Fisher-Yates с final_seed как источником, взять первые X, сортировать",
            "Для каждого игрока: взять metadata.barrelsNumber из БД, посчитать пересечения с выигрышными бочками, сохранить matches_count",
            "Определение победителей по matches_count согласно правилам",
            "Сохранение результатов в БД",
            "Публикация всех данных для верификации"
          ],
          frontend: [
            "Получение полного ответа с результатами",
            "Отображение выигрышных бочек",
            "Отображение результата для текущего игрока (совпадения, выиграл/проиграл)",
            "Отображение списка всех победителей",
            "Предоставление UI для верификации"
          ]
        }
      },
      {
        stage: 6,
        name: "Публикация доказательств и верификация",
        short_description: "Публикация всех данных для независимой проверки честности",
        detailed_description: "Сервер публикует все данные необходимые для проверки честности: seed, все хеши, все картинки, алгоритм генерации. Любой человек может независимо пересчитать результат и убедиться в честности розыгрыша.",
        steps: {
          backend: [
            "Публикация verification_data: seed, seedHash, drand_randomness, drandRound",
            "Публикация всех картинок игроков (ссылки на S3)",
            "Публикация всех entropy пользователей и бочки пользователей",
            "Публикация всех номеров бочек в открытом виде",
            "Публикация final_seed и победные бочки",
            "Публикация алгоритма генерации (описание Fisher-Yates)",
            "Публикация результатов каждого игрока (matches_count)",
          ],
          frontend: [
            "Страница верификации с калькулятором",
            "UI для проверки SHA-256(seed) == seedHash",
            "Ссылка на drand API для проверки randomness",
            "UI для скачивания и проверки хешей картинок",
            "UI для проверки хешей бочек игроков",
            "UI для пересчёта final_seed",
            "UI для пересчёта выигрышных бочек (с визуализацией алгоритма)",
            "UI для пересчёта совпадений каждого игрока",
            "Отображение всех шагов верификации с галочками успеха/ошибки"
          ]
        }
      }
    ],
    security_guarantees: {
      unpredictability: "Результат невозможно предсказать до получения drand_randomness, так как он генерируется в будущем распределённой сетью",
      non_manipulation_server: "Сервер не может изменить seed (seedHash опубликован), не может подделать drand (публичный API)",
      non_manipulation_players: "Игроки не могут изменить свои данные после регистрации (хеши зафиксированы), один игрок не контролирует результат (энтропия от N игроков)",
      public_verifiability: "Любой человек может независимо пересчитать весь процесс и проверить результат используя опубликованные данные"
    },
    entropy_sources: [
      {
        source: "Секретный seed сервера",
        type: "Контролируется сервером",
        protection: "Commitment опубликован до регистрации",
        contribution: "Базовая случайность"
      },
      {
        source: "Картинки игроков",
        type: "Контролируется игроками",
        protection: "Хеши опубликованы при регистрации",
        contribution: "Распределённая энтропия от N игроков"
      },
      {
        source: "Случайность от Drand",
        type: "Внешний маяк (никто не контролирует)",
        protection: "Публичная распределённая сеть, пороговая криптография",
        contribution: "Непредсказуемая случайность из будущего"
      }
    ],
    cryptographic_primitives: {
      hash_function: "SHA-256",
      rng_algorithm: "Тасовка Фишера-Йетса с детерминированным seed",
      commitment_scheme: "Commitment на основе хеширования",
      external_randomness: "Drand пороговые BLS подписи"
    }
  }
}