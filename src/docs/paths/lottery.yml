v1.createLottery:
  summary: Создание новой лотереи
  description: Создает новую лотерею с загрузкой SVG изображения (только для администраторов)
  tags:
    - Lottery
  security:
    - JWTToken: []
  requestBody:
    content:
      multipart/form-data:
        schema:
          $ref: '../components/schemas/lottery.yml#/CreateLotteryRequest'
  responses:
    201:
      $ref: '../components/responses/lottery.yml#/LotteryCreated'
    400:
      $ref: '../components/responses/errors.yml#/BadRequest'
    401:
      $ref: '../components/responses/errors.yml#/Unauthorized'
    403:
      $ref: '../components/responses/errors.yml#/Forbidden'
    500:
      $ref: '../components/responses/errors.yml#/InternalError'

v1.getLottery:
  summary: Получение лотереи по ID
  description: Возвращает информацию о конкретной лотерее
  tags:
    - Lottery
  security:
    - JWTToken: []
  parameters:
    - name: id
      in: path
      required: true
      description: ID лотереи
      schema:
        type: integer
        example: 1
  responses:
    200:
      description: Лотерея успешно получена
      content:
        application/json:
          schema:
            $ref: '../components/schemas/lottery.yml#/LotteryWithImage'
    400:
      $ref: '../components/responses/errors.yml#/BadRequest'
    404:
      $ref: '../components/responses/errors.yml#/NotFound'
    500:
      $ref: '../components/responses/errors.yml#/InternalError'

v1.listLotteries:
  summary: Список всех лотерей
  description: Возвращает список всех лотерей с поддержкой фильтрации и пагинации
  tags:
    - Lottery
  security:
    - JWTToken: []
  parameters:
    - $ref: '../components/parameters/lottery.yml#/PageQuery'
    - $ref: '../components/parameters/lottery.yml#/LimitQuery'
    - $ref: '../components/parameters/lottery.yml#/SearchQuery'
    - $ref: '../components/parameters/lottery.yml#/StatusQuery'
    - $ref: '../components/parameters/lottery.yml#/OrganizatorIdQuery'
  responses:
    200:
      $ref: '../components/responses/lottery.yml#/LotteriesList'
    400:
      $ref: '../components/responses/errors.yml#/BadRequest'
    500:
      $ref: '../components/responses/errors.yml#/InternalError'

v1.registerInLottery:
  summary: Регистрация в лотерее
  description: Регистрирует пользователя в лотерее с загрузкой изображения
  tags:
    - Lottery
  security:
    - JWTToken: []
  requestBody:
    required: true
    content:
      multipart/form-data:
        schema:
          $ref: '../components/schemas/lottery.yml#/RegisterInLotteryRequest'
  responses:
    201:
      $ref: '../components/responses/lottery.yml#/LotteryRegistrationSuccess'
    400:
      $ref: '../components/responses/errors.yml#/BadRequest'
    401:
      $ref: '../components/responses/errors.yml#/Unauthorized'
    404:
      $ref: '../components/responses/errors.yml#/NotFound'
    409:
      $ref: '../components/responses/errors.yml#/Conflict'
    500:
      $ref: '../components/responses/errors.yml#/InternalError'

v1.calculateLotteryWinners:
  summary: Подведение итогов лотереи
  description: Вычисляет результаты лотереи и определяет победителей (только для администраторов)
  tags:
    - Lottery
  security:
    - JWTToken: []
  requestBody:
    required: true
    content:
      application/json:
        schema:
          type: object
          required:
            - lotteryId
          properties:
            lotteryId:
              type: integer
              description: ID лотереи для расчёта результатов
              example: 1
            drandRandomness:
              type: string  
              description: 'drand значение'
  responses:
    200:
      $ref: '../components/responses/lottery.yml#/LotteryCalculationSuccess'
    400:
      $ref: '../components/responses/errors.yml#/BadRequest'
    401:
      $ref: '../components/responses/errors.yml#/Unauthorized'
    403:
      $ref: '../components/responses/errors.yml#/Forbidden'
    404:
      $ref: '../components/responses/errors.yml#/NotFound'
    500:
      $ref: '../components/responses/errors.yml#/InternalError'

v1.getUserLotteryResults:
  summary: Получение результатов лотереи для пользователя
  description: Возвращает результаты участия пользователя в лотерее после подведения итогов
  tags:
    - Lottery
  security:
    - JWTToken: []
  parameters:
    - $ref: '../components/parameters/lottery.yml#/LotteryIdPathParam'
  responses:
    200:
      $ref: '../components/responses/lottery.yml#/UserLotteryResultsSuccess'
    401:
      $ref: '../components/responses/errors.yml#/Unauthorized'
    403:
      $ref: '../components/responses/errors.yml#/Forbidden'
    404:
      $ref: '../components/responses/errors.yml#/NotFound'
    500:
      $ref: '../components/responses/errors.yml#/InternalError'

v1.calculateLotteryVerification:
  post:
    summary: Калькулятор верификации лотереи
    description: Принимает входные данные от пользователя и вычисляет результат розыгрыша для независимой проверки честности. Сравнивает вычисленные значения с официальными данными лотереи (если указан lotteryId) и выявляет аномалии.
    tags:
      - Lottery
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - seed
              - drandRandomness
              - playerEntropies
              - barrelLimit
              - barrelCount
            properties:
              lotteryId:
                type: integer
                nullable: true
                example: 123
                description: "ID лотереи для сравнения с официальными данными (опционально)"
              seed:
                type: string
                example: "a3f5e8c9d4e1f0a6b5c8d7e3f2a1b9c4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0"
                description: "Секретный seed сервера (раскрытый после розыгрыша)"
              drandRandomness:
                type: string
                example: "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92"
                description: "Случайное число от drand"
              playerEntropies:
                type: array
                items:
                  type: string
                example: 
                  - "d48d7a91c17feac70776cc96112ca2ea178a0e0696dc5667190681d50121d112"
                  - "c4d8e2f1a9b3e5f7a0b2c4d6e8f1a3b5c7d9e0f2a4b6c8d0e2f4a6b8c0d2e4f6"
                description: "Массив энтропий игроков (SHA-256 хеши)"
                minItems: 1
              barrelLimit:
                type: integer
                example: 90
                description: "Максимальный номер бочки"
                minimum: 1
              barrelCount:
                type: integer
                example: 15
                description: "Количество выигрышных бочек"
                minimum: 1
    responses:
      '200':
        description: Результат вычисления успешно получен
        content:
          application/json:
            schema:
              type: object
              properties:
                calculated:
                  type: object
                  description: "Вычисленные значения"
                  properties:
                    seedHash:
                      type: string
                      example: "b7f3a2e9c8d4f1a0e6b5c9d7e3f2a1b0c4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9"
                      description: "SHA-256 хеш seed"
                    playerEntropies:
                      type: array
                      items:
                        type: string
                      example: ["hash1", "hash2", "hash3"]
                      description: "Обработанные энтропии игроков"
                    finalSeed:
                      type: string
                      example: "e9f2a3b8c7d6e5f4a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f6a7b8c9d0e1f2"
                      description: "Финальный seed"
                    winningBarrels:
                      type: array
                      items:
                        type: integer
                      example: [3, 12, 23, 34, 45, 56, 67, 71, 78, 82, 85, 87, 88, 89, 90]
                      description: "Вычисленные выигрышные бочки"
                randomnessTestFileUrl:
                  type: string
                  nullable: true
                  example: "https://s3.amazonaws.com/bucket/verification/lottery_123_randomness_test.txt"
                  description: "Ссылка на файл с миллионом бит для тестов случайности (если запрошено через generateBitsFile=true)"
                official:
                  type: object
                  nullable: true
                  description: "Официальные данные лотереи (если lotteryId указан и лотерея завершена)"
                  properties:
                    seedHash:
                      type: string
                      example: "b7f3a2e9c8d4f1a0e6b5c9d7e3f2a1b0c4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9"
                      description: "Официальный хеш seed из лотереи"
                    finalSeed:
                      type: string
                      example: "e9f2a3b8c7d6e5f4a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f6a7b8c9d0e1f2"
                      description: "Официальный final seed"
                    drandRandomness:
                      type: string
                      example: "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92"
                      description: "Официальный drand randomness"
                    winningBarrels:
                      type: array
                      items:
                        type: integer
                      example: [3, 12, 23, 34, 45, 56, 67, 71, 78, 82, 85, 87, 88, 89, 90]
                      description: "Официальные выигрышные бочки"
                verification:
                  type: object
                  description: "Результаты верификации"
                  properties:
                    isValid:
                      type: boolean
                      example: true
                      description: "Совпадают ли вычисленные данные с официальными"
                    anomaliesCount:
                      type: integer
                      example: 0
                      description: "Общее количество обнаруженных аномалий"
                    criticalAnomalies:
                      type: integer
                      example: 0
                      description: "Количество критических аномалий"
                    warnings:
                      type: integer
                      example: 0
                      description: "Количество предупреждений"
                anomalies:
                  type: array
                  description: "Список обнаруженных аномалий (пустой если всё совпадает)"
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum: 
                          - seed_hash_mismatch
                          - drand_mismatch
                          - final_seed_mismatch
                          - winning_barrels_mismatch
                          - participants_count_mismatch
                        example: "seed_hash_mismatch"
                        description: "Тип аномалии"
                      severity:
                        type: string
                        enum: [critical, warning]
                        example: "critical"
                        description: "Серьёзность: critical - критическая ошибка, warning - предупреждение"
                      description:
                        type: string
                        example: "SHA-256 хеш seed не совпадает с опубликованным commitment"
                        description: "Человекочитаемое описание аномалии"
                      expected:
                        oneOf:
                          - type: string
                          - type: integer
                          - type: array
                        example: "b7f3a2e9..."
                        description: "Ожидаемое (официальное) значение"
                      actual:
                        oneOf:
                          - type: string
                          - type: integer
                          - type: array
                        example: "a1b2c3d4..."
                        description: "Фактическое (вычисленное) значение"
                steps:
                  type: array
                  description: "Пошаговое описание вычислений с результатами валидации"
                  items:
                    type: object
                    properties:
                      step:
                        type: integer
                        example: 1
                        description: "Номер шага"
                      name:
                        type: string
                        example: "Вычисление seedHash"
                        description: "Название шага"
                      input:
                        oneOf:
                          - type: string
                          - type: object
                          - type: array
                        description: "Входные данные для шага"
                      output:
                        oneOf:
                          - type: string
                          - type: array
                        description: "Результат выполнения шага"
                      formula:
                        type: string
                        example: "SHA-256(seed)"
                        description: "Формула или алгоритм вычисления"
                      valid:
                        type: boolean
                        example: true
                        description: "Совпадает ли результат шага с официальными данными (null если нет официальных данных)"
                        nullable: true
      '400':
        $ref: '../components/responses/errors.yml#/BadRequest'
      '500':
        $ref: '../components/responses/errors.yml#/InternalError'