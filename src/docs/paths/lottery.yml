v1.createLottery:
  summary: Создание новой лотереи
  description: Создает новую лотерею с загрузкой SVG изображения (только для администраторов)
  tags:
    - Lottery
  security:
    - JWTToken: []
  requestBody:
    content:
      multipart/form-data:
        schema:
          type: object
          required:
            - name
            - startAt
            - endAt
            - amount
          properties:
            file:
              type: string
              format: binary
              description: SVG изображение лотереи
            name:
              type: string
              description: Название лотереи
              example: "Новогодний розыгрыш 2025"
            description:
              type: string
              description: Описание лотереи
              example: "Разыгрываем крутые призы к Новому году"
            startAt:
              type: string
              format: date-time
              description: Дата и время начала лотереи
              example: "2025-12-01T00:00:00Z"
            endAt:
              type: string
              format: date-time
              description: Дата и время окончания лотереи
              example: "2025-12-31T23:59:59Z"
            barrelCount:
              type: number
              description: Общее количество бочек в лотерее
            barrelLimit:
              type: number
              description: Лимит бочек на одного участника
            amount:
              type: integer
              example: 7000000
  responses:
    201:
      description: Лотерея успешно создана
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: "Новогодний розыгрыш 2025"
              description:
                type: string
                example: "Разыгрываем крутые призы к Новому году"
              attachmentKey:
                type: string
                description: S3 ключ изображения
                example: "lotteries/1634567890123-a1b2c3d4e5f6.svg"
              startAt:
                type: string
                format: date-time
                example: "2025-12-01T00:00:00Z"
              endAt:
                type: string
                format: date-time
                example: "2025-12-31T23:59:59Z"
              amount:
                type: integer
                example: 7000000
              organizator:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  email:
                    type: string
                    example: "admin@example.com"
                  firstName:
                    type: string
                    example: "Иван"
                  lastName:
                    type: string
                    example: "Иванов"
              metadata:
                type: object
                properties:
                  barrelCount:
                    type: integer
                    example: 90
                  barrelLimit:
                    type: integer
                    example: 10
                nullable: true
              status:
                type: string
                enum: [draft, inProgress, finished]
                example: "draft"
              seedHash:
                type: string
                description: SHA-256 хеш от seed для проверки честности
                example: "a3f5e8c2d1b4567890abcdef1234567890abcdef1234567890abcdef12345678"
              drandRound:
                type: integer
                description: Номер раунда drand для получения случайного числа
                example: 12345678
              createdAt:
                type: string
                format: date-time
                example: "2025-10-22T12:00:00.000Z"
    400:
      $ref: '../components/responses/errors.yml#/BadRequest'
    401:
      $ref: '../components/responses/errors.yml#/Unauthorized'
    403:
      $ref: '../components/responses/errors.yml#/Forbidden'
    500:
      $ref: '../components/responses/errors.yml#/InternalError'

v1.getLotteryImage:
  summary: Получение URL изображения лотереи
  description: Возвращает подписанный URL для доступа к изображению лотереи из S3
  tags:
    - Lottery
  security:
    - JWTToken: []
  parameters:
    - name: id
      in: path
      required: true
      description: ID лотереи
      schema:
        type: integer
        example: 1
  responses:
    200:
      description: URL изображения успешно получен
      content:
        application/json:
          schema:
            type: object
            properties:
              attachmentKey:
                type: string
                description: S3 ключ изображения
                example: "lotteries/1634567890123-a1b2c3d4e5f6.svg"
              url:
                type: string
                description: Подписанный URL для доступа к изображению
                example: "https://bucket.s3.region.amazonaws.com/lotteries/1634567890123-a1b2c3d4e5f6.svg?X-Amz-Algorithm=..."
              expiresIn:
                type: integer
                description: Время действия URL в секундах
                example: 3600
    404:
      $ref: '../components/responses/errors.yml#/NotFound'
    500:
      $ref: '../components/responses/errors.yml#/InternalError'

v1.listLotteries:
  summary: Список всех лотерей
  description: Возвращает список всех лотерей с поддержкой фильтрации и пагинации
  tags:
    - Lottery
  security:
    - JWTToken: []
  parameters:
    - name: page
      in: query
      required: false
      description: Номер страницы
      schema:
        type: integer
        default: 1
        minimum: 1
        example: 1
    - name: limit
      in: query
      required: false
      description: Количество элементов на странице
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 100
        example: 10
    - name: search
      in: query
      required: false
      description: Поиск по названию или описанию лотереи
      schema:
        type: string
        example: "Новогодний"
    - name: status
      in: query
      required: false
      description: Фильтр по статусу лотереи
      schema:
        type: string
        enum: [draft, inProgress, finished]
        example: "inProgress"
    - name: organizatorId
      in: query
      required: false
      description: Фильтр по ID организатора
      schema:
        type: integer
        example: 1
  responses:
    200:
      description: Список лотерей успешно получен
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/LotteryWithImage'
              pagination:
                $ref: '../components/schemas/common.yml#/Pagination'
    400:
      $ref: '../components/responses/errors.yml#/BadRequest'
    500:
      $ref: '../components/responses/errors.yml#/InternalError'

v1.getLottery:
  summary: Получение лотереи по ID
  description: Возвращает информацию о конкретной лотерее
  tags:
    - Lottery
  security:
    - JWTToken: []
  parameters:
    - name: id
      in: path
      required: true
      description: ID лотереи
      schema:
        type: integer
        example: 1
  responses:
    200:
      description: Лотерея успешно получена
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LotteryWithImage'
    400:
      $ref: '../components/responses/errors.yml#/BadRequest'
    404:
      $ref: '../components/responses/errors.yml#/NotFound'
    500:
      $ref: '../components/responses/errors.yml#/InternalError'

v1.registerInLottery:
  summary: Регистрация в лотерее
  description: Регистрирует пользователя в лотерее с загрузкой изображения
  tags:
    - Lottery
  security:
    - JWTToken: []
  requestBody:
    required: true
    content:
      multipart/form-data:
        schema:
          type: object
          required:
            - file
            - lotteryId
            - barrelHash
          properties:
            file:
              type: string
              format: binary
              description: Изображение пользователя (JPEG, PNG, GIF, WebP)
            lotteryId:
              type: integer
              description: ID лотереи
              example: 1
            barrelHash:
              type: string
              description: SHA-256 хеш выбранных бочек
              example: "5d41402abc4b2a76b9719d911017c592ae1f8c7a1bcd1e3b0e8f7d6a9c5b4a3e"
              pattern: '^[a-f0-9]{64}$'
  responses:
    201:
      description: Пользователь успешно зарегистрирован в лотерее
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Вы успешно зарегистрированы в лотерее"
              assignment:
                type: object
                properties:
                  userId:
                    type: integer
                    example: 1
                  lotteryId:
                    type: integer
                    example: 1
                  entropy:
                    type: string
                    example: "a1b2c3d4e5f6..."
                  status:
                    type: string
                    enum: [inProgress, won, lost]
                    example: "inProgress"
                  registeredAt:
                    type: string
                    format: date-time
                    example: "2025-10-22T12:00:00.000Z"
              lottery:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: "Новогодний розыгрыш 2025"
                  startAt:
                    type: string
                    format: date-time
                    example: "2025-12-01T00:00:00Z"
                  endAt:
                    type: string
                    format: date-time
                    example: "2025-12-31T23:59:59Z"
    400:
      $ref: '../components/responses/errors.yml#/BadRequest'
    401:
      $ref: '../components/responses/errors.yml#/Unauthorized'
    403:
      $ref: '../components/responses/errors.yml#/Forbidden'
    404:
      $ref: '../components/responses/errors.yml#/NotFound'
    409:
      $ref: '../components/responses/errors.yml#/Conflict'
    500:
      $ref: '../components/responses/errors.yml#/InternalError'

components:
  schemas:
    LotteryWithImage:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Новогодний розыгрыш 2025"
        description:
          type: string
          example: "Разыгрываем крутые призы к Новому году"
        image:
          type: object
          nullable: true
          properties:
            attachmentKey:
              type: string
              description: S3 ключ изображения
              example: "lotteries/1634567890123-a1b2c3d4e5f6.svg"
            url:
              type: string
              description: Подписанный URL для доступа к изображению
              example: "https://bucket.s3.region.amazonaws.com/lotteries/1634567890123-a1b2c3d4e5f6.svg?X-Amz-Algorithm=..."
            expiresIn:
              type: integer
              description: Время действия URL в секундах
              example: 3600
        amount:
          type: number
          example: 100000.50
        startAt:
          type: string
          format: date-time
          example: "2025-12-01T00:00:00Z"
        endAt:
          type: string
          format: date-time
          example: "2025-12-31T23:59:59Z"
        organizator:
          type: object
          properties:
            id:
              type: integer
              example: 1
            email:
              type: string
              example: "admin@example.com"
            firstName:
              type: string
              example: "Иван"
            lastName:
              type: string
              example: "Иванов"
        metadata:
          type: object
          properties:
            barrelCount:
              type: integer
              example: 90
            barrelLimit:
              type: integer
              example: 10
          nullable: true
        status:
          type: string
          enum: [draft, inProgress, finished]
          example: "draft"
        seedHash:
          type: string
          description: SHA-256 хеш от seed для проверки честности розыгрыша
          example: "a3f5e8c2d1b4567890abcdef1234567890abcdef1234567890abcdef12345678"
        drandRound:
          type: integer
          description: Номер раунда drand для получения случайного числа. Используйте API https://api.drand.sh/{chainHash}/public/{round}
          example: 12345678
        createdAt:
          type: string
          format: date-time
          example: "2025-10-22T12:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-10-22T12:00:00.000Z"